#include<iostream>
#include<vector>
#include<assert.h>

using namespace std;

// vector
void test1_vector()
{
	vector<int> v1;
	v1.push_back(1);
	v1.push_back(2);
	v1.push_back(3);
	v1.push_back(4);

	vector<int> v2(v1);
	for (int i = 0; i < v1.size(); i++)
	{
		cout << v1[i] << ' ';
	}
	cout << endl;
	
	for (int i = 0; i < v2.size(); i++)
	{
		cout << v2[i] << ' ';
	}
	cout << endl;

	vector<int> v3;
	v3.push_back(10);
	v3.push_back(20);
	v3.push_back(30);
	v3.push_back(40);
	
	v1 = v3;
	for (int i = 0; i < v1.size(); i++)
	{
		cout << v1[i] << ' ';
	}
	cout << endl;

}

void test2_vector()
{
	vector<int> v;
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(40);

	//遍历
	//operator[] + size()
	for (size_t i = 0; i < v.size(); ++i)
	{
		cout << v[i] << ' ';
	}
	cout << endl;

	//迭代器
	vector<int>::iterator it = v.begin();
	while(it != v.end())
	{
		cout << *it << ' ';
		++it;
	}
	cout << endl;

	//范围for
	for (auto e : v)
	{
		cout << e << ' ';
	}
	cout << endl;
}

void test3_vector()
{
	vector<int> v1;
	v1.push_back(10);
	v1.push_back(20);
	v1.push_back(30);
	v1.push_back(40);

	const vector<int> v2 = v1;

	// 三种迭代器
	vector<int>::iterator it = v1.begin();//普通正向迭代器
	while (it != v1.end())
	{
		*it *= 2;
		cout << *it << ' ';
		++it;
	}
	cout << endl;

	vector<int>::const_iterator cit = v2.begin();
	while (cit != v2.end())
	{
		cout << *cit << ' ';
		++cit;
	}
	cout << endl;

	vector<int>::reverse_iterator rit = v1.rbegin();
	while (rit != v1.rend())
	{
		cout << *rit << ' ';
		++rit;
	}
	cout << endl;
}

void test4_vector()
{
	vector<int> v;
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(40);

	//删除30
	vector<int>::iterator it = find(v.begin(), v.end(), 30);
	if (it != v.end())
	{
		v.erase(it);
	}
	it = v.begin();
	for (size_t i = 0; i < v.size(); ++i)
	{
		cout << *it << ' ';
		++it;
	}
	cout << endl;
}

////仅两个数只出现一次，其他都恰好出现两次
//vector<int> singleNumber(vector<int>& nums)
//{
//	int tmp = 0;
//	int ret1 = 0, ret2 = 0;
//	vector<int> v;
//	for (auto e : nums)
//	{
//		tmp ^= e;
//	}
//	size_t i = 0;
//	for (; i < 32; i++)
//	{
//		if (tmp & 1 << i)
//			break;
//	}
//	//要找的两个数在第i位上不同
//	for (auto e : nums)
//	{
//		if (e & (1 << i))//第i位为1的
//		{
//			ret1 ^= e;
//		}
//		else//第i位为0的
//		{
//			ret2 ^= e;
//		}
//	}
//	v.push_back(ret1);
//	v.push_back(ret2);
//	return v;
//}

//迭代器失效
void test5_vector()
{
	vector<int> v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(3);
	v.push_back(4);
	v.push_back(5);

	vector<int>::iterator it = v.begin();

	v.push_back(6);
	v.push_back(7);	//此时扩容，但扩容实际上是把原来的空间释放，把数据拷到新空间中，
					//此时迭代器it所指向的原有空间被释放，所以迭代器失效
					//会出现扩容的接口都会导致迭代器失效

	while (it != v.end())
	{
		cout << *it << " ";
		++it;
	}
	cout << endl;
}

void test6_vector()
{
	vector<int> v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(3);
	v.push_back(4);
	v.push_back(5);

	vector<int>::iterator it = v.begin();

	while(it != v.end())
	{
		if (*it % 2 == 0)
		{
			//v.erase(it);// 删除后导致迭代器it失效
			it = v.erase(it);// erase删除后，返回下一个位置的迭代器
		}
		//++it;
		else
		{
			++it;
		}
	}
	for (auto e : v)
	{
		cout << e << ' ';
	}
	cout << endl;

}

//int main() 
//{
//	//test1_vector();
//	//test2_vector();
//	//test3_vector();
//	//test4_vector();
//
//	/*vector<int> v;
//	v.push_back(1);
//	v.push_back(2);
//	v.push_back(1);
//	v.push_back(3);
//	v.push_back(2);
//	v.push_back(5);
//	singleNumber(v);*/
//
//	//test5_vector();
//	//test6_vector();
//	return 0;
//}


#include"vector.h"
int main()
{
	//czx::vector_test1();
	//czx::vector_test2();
	//czx::vector_test3();
	czx::vector_test4();

	return 0;
}


"vector.h"
#pragma once
namespace czx
{
	template<class T>
	class vector
	{
	public:
		typedef T* iterator;
		typedef const T* const_iterator;

		vector()
			:_start(nullptr)
			, _finish(nullptr)
			, _endofstorage(nullptr)
		{}

		/*vector(const vector<T>& v)
		{
			_start = new T[v.capacity()];
			_finish = _start;
			_endofstorage = _start + v.capacity();

			size_t i = 0;
			for(;i < v.size();++i)
			{
				*_finish = v[i];
				++_finish;
			}
		}*/

		vector(const vector<T>& v)
			:_start(nullptr)
			, _finish(nullptr)
			,_endofstorage(nullptr)
		{
			reserve(v.capacity());
			for (const auto& e : v)
			{
				push_back(e);
			}
		}

		vector<T> operator=(vector<T> v)//传拷贝后的，最后舍弃拷贝的那个(析构)
		{
			swap(v);
			return *this;
		}

		void swap(vector<T>& v)
		{
			::swap(_start, v._start);//用的是全局swap函数(库里的)
			::swap(_finish, v._finish);
			::swap(_endofstorage, v._endofstorage);
		}

		size_t size()const
		{
			return _finish - _start;
		}

		size_t capacity()const
		{
			return _endofstorage - _start;
		}

		void reserve(size_t n)
		{
			if (n > capacity())
			{
				size_t sz = size();
				T* tmp = new T[n];
				if (_start)//保证不是空
				{
					//memcpy(tmp, _start, sizeof(T) * sz);//这是一种浅拷贝，如果T是自定义类型，就会引起自定义类型的浅拷贝错误
					for (size_t i = 0; i < sz; ++i)
					{
						tmp[i] = _start[i]; //调用T的operator=()深拷贝
					}
					delete[] _start;
				}
				_start = tmp;
				_finish = tmp + sz;
				_endofstorage = tmp + n;
			}
		}

		void resize(size_t n, const T& val = T())// T()是类型T的默认构造 像int之类的内置类型，为了与c++的模板相适应，也有构造函数
		{
			if (n <= size())
			{
				_finish = _start + n;
			}
			else 
			{
				if (n > capacity())
				{
					reserve(n);
				}
				while (_finish < _start + n)
				{
					*_finish = val;
					++_finish;
				}
			}
		}

		void push_back(const T& v)
		{
			/*if (_finish == _endofstorage)
			{
				size_t newcapacity = capacity() == 0 ? 2 : 2 * capacity();
				reserve(newcapacity);
			}
			*_finish = v;
			++_finish;*/
			insert(_finish, v);
		}

		iterator begin()
		{
			return _start;
		}
		iterator end()
		{
			return _finish;
		}

		const_iterator begin()const
		{
			return _start;
		}
		
		const_iterator end()const
		{
			return _finish;
		}

		T& operator[](size_t i)
		{
			assert(i < size());
			return _start[i];
		}
		
		const T& operator[](size_t i)const 
		{
			assert(i < size());
			return _start[i];
		}

		void pop_back()
		{
			/*assert(_start < _finish);
			--_finish;*/
			erase(_finish - 1);
		}

		iterator insert(iterator pos, const T& x)
		{
			assert(pos <= _finish);

			if (_finish == _endofstorage)
			{
				size_t n = pos - _start;//记录迭代器位置
				size_t newcapacity = capacity() == 0 ? 2 : 2 * capacity();
				reserve(newcapacity);

				pos = _start + n;//增容后重置迭代器
			}

			iterator end = _finish - 1;
			while (end >= pos)
			{
				*(end + 1) = *end;
				--end;
			}
			*pos = x;
			++_finish;
			return _start;
		}

		iterator erase(iterator pos)
		{
			assert(pos < _finish);

			iterator it = pos;
			while (it != _finish)
			{
				*it = *(it + 1);
				++it;
			}
			--_finish;
			return pos;
		}

		~vector()
		{
			delete[] _start;
			_start = _finish = _endofstorage = nullptr;
		}
	private:
		iterator _start;
		iterator _finish;
		iterator _endofstorage;
	};

	void print_vector(const vector<int>& v)
	{
		vector<int>::const_iterator it = v.begin();
		while (it != v.end())
		{
			cout << *it << ' ';
			++it;
		}
		cout << endl;
	}

	void vector_test1()
	{
		vector<int> v;
		v.push_back(1);
		v.push_back(2);
		v.push_back(3);
		v.push_back(4);
		v.push_back(5);

		cout << v.size() << endl;
		cout << v.capacity() << endl;

		print_vector(v);

		vector<int>::iterator it = v.begin();
		while (it != v.end())
		{
			*it += 1;
			cout << *it << ' ';
			++it;
		}
		cout << endl;

	}

	void vector_test2()
	{
		vector<int> v;
		v.push_back(1);
		v.push_back(2);
		v.push_back(3);
		v.push_back(4);
		v.pop_back();

		v.insert(v.begin(), 5);
		print_vector(v);

		v.push_back(6);
		v.push_back(7);
		v.push_back(8);

		vector<int>::iterator it = v.begin();
		while(it != v.end())
		{
			if (*it % 2 == 0)
			{
				it = v.erase(it);
			}
			else
				++it;
		}
		print_vector(v);

		cout << v.size() << endl;
		cout << v.capacity() << endl;

		v.resize(10, 2);
		cout << v.size() << endl;
		cout << v.capacity() << endl;
		print_vector(v);
	}

	void vector_test3()
	{
		vector<int> v1;
		v1.push_back(1);
		v1.push_back(2);
		v1.push_back(3);
		v1.push_back(4);

		vector<int> v2(v1);
		print_vector(v1);
		print_vector(v2);

		vector<int> v3;
		v3.push_back(10);
		v3.push_back(20);
		v3.push_back(30);
		v3.push_back(40);

		v1 = v3;
		print_vector(v1);
		print_vector(v3);
	}

	void vector_test4()
	{
		vector<string> v;
		v.push_back("11111111111111111");
		v.push_back("22222222222222222");
		v.push_back("33333333333333333");
		v.push_back("44444444444444444");
		
		for (auto e : v)
		{
			cout << e << ' ';
		}
		cout << endl;
	}
}
