#include<iostream>
using namespace std;

//检测数组缺少的数，并返回该数
//int Check_num(const int* arr,int Numsize)
//{
//	int ret = 0;
//	for (int i = 0; i < Numsize; i++)
//	{
//		ret ^= arr[i];
//	}
//	for (int i = 1; i < Numsize + 1; i++)
//	{
//		ret ^= i;
//	}
//	return ret;
//}
//int main()
//{
//	int nums[10] = {1,3,4,6,2,8,7,5,10};//10个数字的数组但缺少一个数字
//
//	int ret = Check_num(nums, 10);
//	cout << "缺少的数字为" << ret << endl;
//	return 0;
//}

////引用
//int main()
//{
//	//int a = 10;
//	//int& ra = a;//ra是a的别名，ra和a共用一块空间
//	//ra = 2;
//	//cout << ra << a << endl;
//
//	//int& sa = ra;//sa是ra的别名，也是a的别名
//	//sa = 3;
//	//cout << sa << ra << endl;
//
//	//const int b = 10;
//	//const int& rb = b;
//	//cout << rb << b << endl;
//
//	//const int da = a;
//	//a = 4;
//	//cout << ra << a << da << endl;
//	////别名的读写权限只能缩小
//
//	int num1 = 10;
//	double num2 = num1; //隐式类型转换
//	//double& nnum1 = num1;//error  隐式类型转换
//
//	//const 限定后才可以 (?) 
//	//在进行隐式类型转换时原类型变量num1会生成一个类型转换后的临时变量，
//	// 并且该临时变量具有常性(const限定)(程序为了保护这个临时变量不被修改)
//	//而目标类型变量nnum1实际上是对这个临时变量的使用，
//	// 但因为读写权限只能缩小或不变，所以nnum1必须是只读的(const限定)
//	const double nnum1 = num1;
//	
//	//double& nnum2 = num1;//error 
//	const double& nnum2 = num1;//nnum2是对临时变量的引用，不可修改
//
//	num1 = 30;
//	cout << num1 << endl << nnum1 <<endl << nnum2 << endl;
//	return 0;
//}

//int count1() 
//{
//	static int n = 0;
//	n++;
//	return n;
//}
//
//int& count2()
//{
//	static int n = 0;
//	n++;
//	return n;
//}
//
//int main()
//{
//	//int& n1 = count1(); //error
//
//	//函数返回时会对返回值生成一个临时变量，实际上传回去的是临时变量
//	//而程序对这个临时变量赋予常性，
//	//想要对这个返回值进行引用，需要const限定
//	const int& n1 = count1(); 
//
//	//因为函数返回的是别名（对返回值的引用），
//	// 所以返回的这个（不是临时变量）实际上就是函数内部那个返回变量的一个别名,
//	//所以可以直接通过一个别名来接收
//	int& n2 = count2();
//
//	//注：当函数返回别名时，这个别名依旧会对函数内的
//	// 那个返回变量所在的空间有使用权（即便函数调用结束，这个返回变量的空间被释放（但此时空间的内容可能不会被清除）)
//	// 当程序继续运行时，这个被释放的空间的内容可能会被修改，继而导致那个别名所对应的值被改变
//	// 所以返回并使用一个非static的变量别名是不安全的
//	//why?(static修饰的变量被存储在静态区内，生命周期变为整个程序了，不会随着函数调用结束而释放)
//	return 0;
//}

//引用作为参数使用的时候可以：	1）提高效率(相较于传值)
//							2）输出型参数（别名的使用）
//作为返回值使用:	1)提高效率(传值返回会有一次拷贝，而引用返回时不会)
//				2)...
