//int main()
//{
//	/*
//	//auto会自动判别对象的类型
//	int a = 10;
//	auto b = a;
//	auto& c = a;
//	auto* d = &a;
//	auto e = &a;
//
//	cout << typeid(a).name() << endl;
//	cout << typeid(b).name() << endl;
//	cout << typeid(c).name() << endl;
//	cout << typeid(d).name() << endl;
//	cout << typeid(e).name() << endl;
//	*/
//
//	//auto可以遍历数组,(有点像python中for i in array)
//	int array[5] = { 1,2,3,4,5 };
//
//	for (auto num : array)	//通过num遍历array的每一个元素，但此处实际上是array中的每一个元素赋值给num
//	{						//所以不论num怎么改变，都不会影响到array中的元素值
//		num *= 2;
//	}
//	
//	for (auto num : array)
//	{
//		cout << num << " ";
//	}
//	cout << endl;
//
//	//可以通过别名来改变array中的值
//	for (auto& num : array)	
//	{
//		num *= 2;
//	}
//
//	for (auto num : array)
//	{
//		cout << num << " ";
//	}
//	cout << endl;
//
//	//注意：在函数传参时，不能对形参中的数组进行auto遍历
//	//（传参时实际只传了数组首元素地址，不再是一个数组了，所以不能auto遍历）
//	return 0;
//}

//类
class Student
{
	void Test()//class关键字创建类，成员默认为私有的
	{
		cout << "class: default" << endl;
	}
public:
	void ShowInfo(void)
	{
		cout << _name << endl;
		cout << _age << endl;
		cout << _stuid << endl;
	}
private:		//一般默认让类的成员变量为私有的
	char* _name;
	int _age;
	int _stuid;
};

struct Person
{
	void test()//struct关键字创建类，成员默认为公有的
	{
		cout << "struct:default" << endl;
	}
public:
	void ShowName()
	{
		cout << _name << endl;
	}
private:
	char* _name;
};
int main()
{
	Student s1;
	Person s2;

	//s1.test();//error		//class关键字创建类，成员默认为私有的

	s2.test();	//struct关键字创建类，成员默认为公有的
	return 0;
}


//类
class Student
{
	void Test()//class关键字创建类，成员默认为私有的
	{
		cout << "class: default" << endl;
	}
public:
	void ShowInfo(void)
	{
		cout << _name << endl;
		cout << _age << endl;
		cout << _stuid << endl;
	}
private:		//一般默认让类的成员变量为私有的
	char* _name;
	int _age;
	int _stuid;
};

struct Person
{
	void test()//struct关键字创建类，成员默认为公有的
	{
		cout << "struct:default" << endl;
	}
public:
	void ShowName()
	{
		cout << _name << endl;
	}
private:
	char* _name;
};
int main()
{
	Student s1;
	Person s2;

	//s1.test();//error		//class关键字创建类，成员默认为私有的

	s2.test();	//struct关键字创建类，成员默认为公有的
	return 0;
}

class Stack
{
public:
	void Init()//类内直接定义
	{
		//...
	}
	void Push(int x);//类内声明，类外定义

	//void Pop(int x);
	bool Empty()
	{
		//...
	}
private:
	int* _a;
	int _top;
	int _capicity;
};

//类外定义
void Stack::Push(int x)
{
	//...
}

int main()
{
	Stack s1;
	Stack s2;
	Stack s3;

	s1.Init();
	s1.Push(10);
	cout << sizeof(s2) << endl;

	return 0;
}

class Date
{
public:
	void Init(int year, int month, int day)
	{
		_year = year;	//为什么能用private内的成员变量呢？
		_month = month;	//c++在类的函数调用时编译器会自动增加一个this指针（类* this）指向这个类
		_day = day;		//这个this指针我们也可以使用，但不能显式声明
	}					//this指针是形参，存在于栈中 (但有些编译器优化后存在于其他地方)
	void Print()
	{
		cout << _year << "-" << _month << "-" << _day << endl;
	}
private:
	int _year;
	int _month;
	int _day;
};

int main()
{
	Date i;
	i.Init(2024, 10, 26);
	i.Print();
	return 0;
}

class test
{
public:
	void Print1()
	{
		cout << _x << endl;
	}
	void Print2()
	{
		cout << "test" << endl;
	}
private:
	int _x;
};
int main()
{
	test* p = NULL;
	p->Print1();	//程序崩了，对空指针的解引用(越界访问)
	p->Print2();	//正常运行，实际上并没有使用空指针p
	//因为成员函数存在公共代码段，p->Print2 没有去寻找p实际指向的对象
	//只有在访问成员变量时才会去找p实际指向的对象,而p->Print1就去寻找p指向的对象了，造成越界访问
	
	return 0;
}
