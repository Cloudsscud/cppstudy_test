//构造函数
//特点：函数名与类名相同，无返回值，对象实例化时自动调用，构造函数可以重载
//如果有显式定义构造函数，则编译器不会生成默认无参的构造函数；若无显式构造函数，则编译器生成默认无参构造函数
//默认无参构造函数，对于内置类型成员变量不做处理；但对自定义类型成员变量，会调用这个类型的构造函数进行初始化

class Time
{
public:
	Time()
	{
		_hour = 0;
		_minute = 0;
		_second = 0;

		cout << "Time()" << endl;
	}
private:
	int _hour;
	int _minute;
	int _second;
};

class Date
{
public:
	//Date(int year, int month, int day)	//构造函数：在对象构造时调用，完成初始化工作
	//{										//但是此时没有了默认构造函数
	//	_year = year;					
	//	_month = month;
	//	_day = day;
	//}
	//Date()//所以需要来一个函数重载，来完成单纯的声明任务
	//{
	//	_year = 0;					
	//	_month = 1;
	//	_day = 1;
	// }
	void Print()
	{
		cout << _year << "-" << _month << "-" << _day << endl;
	}
private:
	//内置类型
	int _year;
	int _month;
	int _day;

	//自定义类型
				//在一个(无显式构造函数)的类中，有(含显式构造函数)类的成员变量
	Time _t;	//可以发现这个这个(无显式构造函数)类在实例化时，调用的是默认构造函数
};				//而(含显式构造函数)类成员变量却在实例化时，调用了其自身的构造函数


class test
{
public:
	test(int t1 = 0, int t2 = 1, int t3 = 1)//可以用全缺省构造函数来优化上边Date的那两个构造函数
	{										//注意!：全缺省构造函数不能与我们构造的无参构造函数共存(同属默认构造函数)
		_t1 = t1;				//默认构造函数有三类：全缺省构造函数、我们构造的无参构造函数、编译器默认生成的无参构造函数
		_t2 = t2;				//	均不用传递参数
		_t3 = t3;
	}
private:
	int _t1;
	int _t2;
	int _t3;
};

int main()
{
	//Date t1;	//无参数函数构造时不能加(),否则就成了函数声明了
	//t1.Print();

	//Date t2(2024, 10, 27);
	//t2.Print();

	Date t1;
	return 0;
}
